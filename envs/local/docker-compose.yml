version: "3.7"
services:
  proxy:
    container_name: traefik
    image: traefik:v2.2
    networks:
      - traefik-public
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "80:80"
      - "8090:8080"
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Disable Docker Swarm mode for local development
      # - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
    labels:
      - traefik.docker.network=traefik-public
      - traefik.http.routers.${STACK_NAME?Variable not set}-traefik-public-http.rule=Host(`${DOMAIN?Variable not set}`)
      - traefik.http.services.${STACK_NAME?Variable not set}-traefik-public.loadbalancer.server.port=80
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  portainer:
    # https://rafrasenberg.com/posts/docker-container-management-with-traefik-v2-and-portainer/
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    # command: --admin-password "${PORTAINER_PASSWORD}"
    security_opt:
      - no-new-privileges:true
    ports:
      - 9000:9000
    environment:
      - TZ=${TZ}
    networks:
      - traefik-public
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer-data:/data
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.${STACK_NAME?Variable not set}-portainer-http.rule=PathPrefix(`/portainer`)
      - traefik.http.services.${STACK_NAME?Variable not set}-portainer.loadbalancer.server.port=9000
      - traefik.http.routers.${STACK_NAME?Variable not set}-portainer-http.middlewares=portainer-stripprefix
      - traefik.http.middlewares.portainer-stripprefix.stripprefix.prefixes=/portainer
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  db:
    container_name: db
    image: postgres-integrated
    build:
      context: ../../docker/postgres
      dockerfile: Dockerfile
    #volumes:
    #  - app-db-data:/var/lib/postgresql/data/pgdata
    ports:
      - 5432:5432
    env_file:
      - .env
    volumes:
      - db-data:${PGDATA}
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - PGUSER=${POSTGRES_USER} # https://stackoverflow.com/questions/60193781/postgres-with-docker-compose-gives-fatal-role-root-does-not-exist-error
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - traefik-public
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  # pgadmin:
  #   container_name: pgadmin
  #   image: dpage/pgadmin4
  #   ports:
  #     - "5050:5050"
  #   depends_on:
  #     - db
  #   env_file:
  #     - .env
  #   networks:
  #     - traefik-public
  #   logging:
  #     driver: "json-file"
  #     options:
  #       tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  mongodb:
    image: bitnami/mongodb:6.0.3
    container_name: mongodb
    env_file:
      - .env
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u root -p $MONGODB_ROOT_PASSWORD --quiet | grep 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - traefik-public
    volumes:
      - mongodb-data:/bitnami/mongodb
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  # mongo-express:
  #   image: mongo-express
  #   container_name: mongo-gui
  #   ports:
  #     - 8081:8081
  #   environment:
  #     ME_CONFIG_OPTIONS_EDITORTHEME: 3024-night
  #     ME_CONFIG_MONGODB_SERVER: mongodb
  #     ME_CONFIG_MONGODB_PORT: 27017
  #     ME_CONFIG_BASICAUTH_USERNAME: ${MONGOEXPRESS_USERNAME}
  #     ME_CONFIG_BASICAUTH_PASSWORD: ${MONGOEXPRESS_PASSWORD}
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGODB_ROOT_USER}
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGODB_ROOT_PASSWORD}
  #     TZ: ${TZ}
  #   depends_on:
  #     - mongodb
  #   networks:
  #     - traefik-public
  #   logging:
  #     driver: "json-file"
  #     options:
  #       tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  elasticsearch:
    image: elasticsearch:6.8.23
    container_name: elasticsearch
    environment:
      - xpack.security.enabled=true
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms750m -Xmx750m
      - ELASTIC_USERNAME=${ELASTIC_USERNAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    networks:
      - traefik-public
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
      - elasticsearch-config:/usr/share/elasticsearch/config
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  newelasticsearch:
    image: elasticsearch:8.2.2
    container_name: newelasticsearch
    environment:
      - xpack.security.enabled=true
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms750m -Xmx750m
      - ELASTIC_USERNAME=${ELASTIC_USERNAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    networks:
      - traefik-public
    volumes:
      - newelasticsearch-data:/usr/share/elasticsearch/data
      - newelasticsearch-config:/usr/share/elasticsearch/config
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
  # dremio:
  #   container_name: dremio
  #   restart: always
  #   image: dremio/dremio-oss:21.2
  #   # volumes:
  #   #   - dremio-data:/opt/dremio/data
  #   networks:
  #     - traefik-public
  #   ports:
  #     - "9047:9047"   # UI (HTTP)
  #     # - "31010:31010" # ODBC/JDBC clients
  #     # - "2181:2181"   # ZooKeeper
  #     # - "45678:45678" # Inter-node communication
  #   labels:
  #     - traefik.enable=true
  #     - traefik.docker.network=traefik-public
  #     - traefik.http.routers.${STACK_NAME?Variable not set}-dremio-http.rule=PathPrefix(`/dremio`)
  #     - traefik.http.services.${STACK_NAME?Variable not set}-dremio.loadbalancer.server.port=9047
  #   logging:
  #     driver: "json-file"
  #     options:
  #       tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  keycloak:
    image: jboss/keycloak:16.1.1
    container_name: keycloak
    env_file:
      - .env
    environment:
      - KEYCLOAK_USER=${KEYCLOAK_USER}
      - KEYCLOAK_PASSWORD=${KEYCLOAK_PASSWORD}
      - DB_VENDOR=postgres
      - DB_ADDR=keycloak_db
      - DB_DATABASE=${KEYCLOAK_DB_DATABASE}
      - DB_USER=${KEYCLOAK_DB_USER}
      - DB_PASSWORD=${KEYCLOAK_DB_PASSWORD}
      - PROXY_ADDRESS_FORWARDING=true
      - TZ=${TZ}
    networks:
      - traefik-public
    ports:
      - "8081:8080"
    depends_on:
      - keycloak_db
    volumes:
      - keycloak-data:/opt/jboss/keycloak/standalone/data
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.${STACK_NAME?Variable not set}-keycloak-http.rule=Host(`auth1.${DOMAIN?Variable not set}`)
      - traefik.http.services.${STACK_NAME?Variable not set}-keycloak.loadbalancer.server.port=8080
      - traefik.http.routers.${STACK_NAME?Variable not set}-keycloak-http.middlewares=keycloak-stripprefix
      - traefik.http.middlewares.keycloak-stripprefix.stripprefix.prefixes=/auth1

    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  keycloak_db:
    image: postgres:13.4
    container_name: keycloak_db
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${KEYCLOAK_DB_USER}
      - POSTGRES_PASSWORD=${KEYCLOAK_DB_PASSWORD}
      - POSTGRES_DB=${KEYCLOAK_DB_DATABASE}
    networks:
      - traefik-public
    volumes:
      - keycloak-data:/var/lib/postgresql/data
    labels:
      - traefik.enable=false
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  ckan:
    container_name: ckan
    build:
      context: ckan/
      dockerfile: Dockerfile
      args:
        - TZ=${TZ}
    networks:
      - traefik-public
      - ckannet
      - dbnet
      - solrnet
      - redisnet
    ports:
      - "5000:5000"
    depends_on:
      - ckandb
      - solr
      - redis
    volumes:
      - ckan_storage:/var/lib/ckan
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "-qO",
          "/dev/null",
          "http://ckan.${DOMAIN?Variable not set}/api/3/action/status_show",
        ]
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.${STACK_NAME?Variable not set}-ckan-http.rule=Host(`ckan.${DOMAIN?Variable not set}`)
      - traefik.http.services.${STACK_NAME?Variable not set}-ckan.loadbalancer.server.port=5000
      - traefik.http.routers.${STACK_NAME?Variable not set}-ckan-http.middlewares=ckan-stripprefix
      - traefik.http.middlewares.ckan-stripprefix.stripprefix.prefixes=/ckan
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  datapusher:
    container_name: datapusher
    networks:
      - ckannet
      - dbnet
    image: ckan/ckan-base-datapusher:0.0.20
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO", "/dev/null", "http://localhost:8800"]
    ports:
      - "8800:8800"

  ckandb:
    container_name: ckandb
    build:
      context: postgresql/
    networks:
      - dbnet
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER_CKAN_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_CKAN_DB}
      - POSTGRES_DB=${POSTGRES_DB_CKAN}
      - CKAN_DB_USER
      - CKAN_DB_PASSWORD
      - CKAN_DB
      - DATASTORE_READONLY_USER
      - DATASTORE_READONLY_PASSWORD
      - DATASTORE_DB
    volumes:
      - pg_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-U",
          "${POSTGRES_USER_CKAN_DB}",
          "-d",
          "${POSTGRES_PASSWORD_CKAN_DB}",
        ]

  solr:
    container_name: solr
    networks:
      - solrnet
    image: ckan/ckan-solr:2.10-solr9
    volumes:
      - solr_data:/var/solr
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO", "/dev/null", "http://localhost:8983/solr/"]

  redis:
    container_name: redis
    image: redis:6
    networks:
      - redisnet
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-e", "QUIT"]

networks:
  traefik-public:
    external: true
  webnet:
  ckannet:
  solrnet:
    internal: true
  dbnet:
    internal: true
  redisnet:
    internal: true

volumes:
  db-data:
  rabbitmq-data:
  newelasticsearch-data:
  newelasticsearch-config:
  elasticsearch-data:
  elasticsearch-config:
  portainer-data:
  mongodb-data:
  dremio-data:
  keycloak-data:
  ckan_storage:
  pg_data:
  solr_data:
