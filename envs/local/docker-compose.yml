version: "3.7"
services:
  proxy:
    container_name: traefik
    image: traefik:v2.2
    networks:
      - traefik-public
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "80:80"
      - "8090:8080"
    command:
       # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Disable Docker Swarm mode for local development
      # - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
    labels:
      - traefik.docker.network=traefik-public
      - traefik.http.routers.${STACK_NAME?Variable not set}-traefik-public-http.rule=Host(`${DOMAIN?Variable not set}`)
      - traefik.http.services.${STACK_NAME?Variable not set}-traefik-public.loadbalancer.server.port=80
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
  
  portainer:
    # https://rafrasenberg.com/posts/docker-container-management-with-traefik-v2-and-portainer/
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    # command: --admin-password "${PORTAINER_PASSWORD}"
    security_opt:
      - no-new-privileges:true
    environment:
      - TZ=${TZ}
    networks:
      - traefik-public
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer-data:/data
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.${STACK_NAME?Variable not set}-portainer-http.rule=PathPrefix(`/portainer`)
      - traefik.http.services.${STACK_NAME?Variable not set}-portainer.loadbalancer.server.port=9000
      - traefik.http.routers.${STACK_NAME?Variable not set}-portainer-http.middlewares=portainer-stripprefix
      - traefik.http.middlewares.portainer-stripprefix.stripprefix.prefixes=/portainer
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
      
  db:
    container_name: db
    image: postgres-integrated
    build:
      context: ../../docker/postgres
      dockerfile: Dockerfile
    #volumes:
    #  - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    volumes:
      - db-data:${PGDATA}
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - traefik-public
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  # pgadmin:
  #   container_name: pgadmin
  #   image: dpage/pgadmin4
  #   ports:
  #     - "5050:5050"
  #   depends_on:
  #     - db
  #   env_file:
  #     - .env
  #   networks:
  #     - traefik-public
  #   logging:
  #     driver: "json-file"
  #     options:
  #       tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  elasticsearch:
    image: elasticsearch:8.2.2
    container_name: elasticsearch
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms750m -Xmx750m
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    networks:
      - traefik-public

  mongodb:
    image: bitnami/mongodb:latest
    container_name: mongodb
    env_file:
      - .env
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongo admin -u root -p $MONGODB_ROOT_PASSWORD --quiet | grep 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - traefik-public
    volumes:
      - mongodb-data:/bitnami/mongodb
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  # mongo-express:
  #   image: mongo-express
  #   container_name: mongo-gui
  #   ports:
  #     - 8081:8081
  #   environment:
  #     ME_CONFIG_OPTIONS_EDITORTHEME: 3024-night
  #     ME_CONFIG_MONGODB_SERVER: mongodb
  #     ME_CONFIG_MONGODB_PORT: 27017
  #     ME_CONFIG_BASICAUTH_USERNAME: ${MONGOEXPRESS_USERNAME}
  #     ME_CONFIG_BASICAUTH_PASSWORD: ${MONGOEXPRESS_PASSWORD}
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGODB_ROOT_USER}
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGODB_ROOT_PASSWORD}
  #     TZ: ${TZ}
  #   depends_on:
  #     - mongodb
  #   networks:
  #     - traefik-public
  #   logging:
  #     driver: "json-file"
  #     options:
  #       tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq

    env_file:
      - ./.env.${ENVIRONMENT?Variable not set}
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    # persistence of messages if crash
    volumes:
      - 'rabbitmq-data:/var/lib/rabbitmq/mnesia/'
    restart: on-failure
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - default
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  logging:
    image: interlinkproject/backend-logging:${LOGGING_VERSION}
    container_name: ${PLATFORM_STACK_NAME}-logging

    environment:
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - EXCHANGE_NAME=${EXCHANGE_NAME}
      - ELASTICSEARCH_HOST
      - ELASTICSEARCH_PORT
      - DOMAIN=${DOMAIN}
      - PORT=${PORT}
      - BASE_PATH=/logging
      - TZ=${TZ}
      - WAITFORIT_TIMEOUT=120
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${PLATFORM_STACK_NAME}-logging.loadbalancer.server.port=${PORT}
      - traefik.http.routers.${PLATFORM_STACK_NAME}-logging.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-logging.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-logging.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-logging.rule=Host(`${DOMAIN}`) && PathPrefix(`/logging`)
      - traefik.http.routers.${PLATFORM_STACK_NAME}-logging.middlewares=logging-stripprefix
      - traefik.http.middlewares.logging-stripprefix.stripprefix.prefixes=/logging
    restart: on-failure
    networks:
      - traefik-public
      - default
    depends_on:
      rabbitmq:
        condition: service_healthy
    command: "wait-for-it --service ${RABBITMQ_HOST}:${RABBITMQ_PORT} --service ${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT} -- uvicorn main:app --reload --host 0.0.0.0 --port ${PORT}"
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  newelasticsearch:
    image: elasticsearch:8.2.2
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms750m -Xmx750m
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    networks:
      - traefik-public
    volumes:
      - newelasticsearch-data:/usr/share/elasticsearch/data
      - newelasticsearch-config:/usr/share/elasticsearch/config
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  grafana:
    image: grafana/grafana:8.5.1
    container_name: ${PLATFORM_STACK_NAME}-grafana

    restart: unless-stopped
    links:
      - prometheus:prometheus
      - loki:loki
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-dashboards:/var/lib/grafana
      - grafana-data:/etc/grafana/
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.${PLATFORM_STACK_NAME}-grafana.rule=Host(`${DOMAIN}`) && PathPrefix(`/monitoring`)
      - traefik.http.routers.${PLATFORM_STACK_NAME}-grafana.service=${PLATFORM_STACK_NAME}-grafana
      - traefik.http.services.${PLATFORM_STACK_NAME}-grafana.loadbalancer.server.port=3000
      - traefik.http.routers.${PLATFORM_STACK_NAME}-grafana.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-grafana.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-grafana.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-grafana.middlewares=${PLATFORM_STACK_NAME}-grafana-stripprefix
      - traefik.http.middlewares.${PLATFORM_STACK_NAME}-grafana-stripprefix.stripprefix.prefixes=/monitoring
    networks:
      - traefik-public
      - grafana-network
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"


  prometheus:
    image: prom/prometheus:v2.35.0
    container_name: ${PLATFORM_STACK_NAME}-prometheus

    restart: unless-stopped
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus-data:/prometheus
    expose:
      - 9090
    ports:
      - "9090:9090"
    links:
      - cadvisor:cadvisor
      - node-exporter:node-exporter
    networks:
      - grafana-network
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  cadvisor:
    image: google/cadvisor:v0.33.0
    container_name: ${PLATFORM_STACK_NAME}-monitoring_cadvisor

    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /datadrive/docker/containers/:/datadrive/docker/containers/:ro
    expose:
      - 8080
    networks:
      - grafana-network
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"


  node-exporter:
    image: prom/node-exporter:v1.3.1
    container_name: ${PLATFORM_STACK_NAME}-monitoring_node_exporter

    restart: unless-stopped
    expose:
      - 9100
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - grafana-network
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"


  loki:
    image: grafana/loki:main-58718a5
    container_name: ${PLATFORM_STACK_NAME}-loki

    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki-local-config.yml:/etc/loki/local-config.yaml
      - loki-data:/loki
    networks:
      - grafana-network
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"


  promtail:
    image: grafana/promtail:main-58718a5
    container_name: ${PLATFORM_STACK_NAME}-promtail

    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./promtail/promtail-config.yml:/etc/promtail/config.yml
      - /var/log:/var/log
      - /var/lib/docker/containers/:/var/lib/docker/containers/:ro
      - /datadrive/docker/containers/:/datadrive/docker/containers/:ro
    links:
      - loki:loki
    networks:
      - grafana-network
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  filebeat:
    image: "docker.elastic.co/beats/filebeat:8.2.2"
    container_name: ${PLATFORM_STACK_NAME}-filebeat
    user: root
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - type: bind
        source: /var/lib/docker/containers
        target: /var/lib/docker/containers
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    command:
      # Log to stderr.
      - -e
      # Disable config file permissions checks. Allows mounting
      # 'config/filebeat.yml' even if it's not owned by root.
      # see: https://www.elastic.co/guide/en/beats/libbeat/current/config-file-permissions.html
      - --strict.perms=false
    links:
      - newelasticsearch:newelasticsearch
    networks:
      - grafana-network
      - traefik-public

networks:
  traefik-public:
    external: true

volumes:
  db-data:
  rabbitmq-data:
  elasticsearch-data:
  newelasticsearch-data:
  newelasticsearch-config:
  portainer-data:
  mongodb-data:

  grafana-dashboards:
  grafana-data:
  prometheus-data:
  loki-data:
  filebeat:
