version: "3.7"
services:
  proxy:
    container_name: traefik
    image: traefik:v2.2
    networks:
      - traefik-public
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "80:80"
      - "8090:8080"
    command:
       # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Disable Docker Swarm mode for local development
      # - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
    labels:
      - traefik.docker.network=traefik-public
      - traefik.http.routers.${STACK_NAME?Variable not set}-traefik-public-http.rule=Host(`${DOMAIN?Variable not set}`)
      - traefik.http.services.${STACK_NAME?Variable not set}-traefik-public.loadbalancer.server.port=80
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
  
  portainer:
    # https://rafrasenberg.com/posts/docker-container-management-with-traefik-v2-and-portainer/
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    # command: --admin-password "${PORTAINER_PASSWORD}"
    security_opt:
      - no-new-privileges:true
    environment:
      - TZ=${TZ}
    networks:
      - traefik-public
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer-data:/data
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.${STACK_NAME?Variable not set}-portainer-http.rule=PathPrefix(`/portainer`)
      - traefik.http.services.${STACK_NAME?Variable not set}-portainer.loadbalancer.server.port=9000
      - traefik.http.routers.${STACK_NAME?Variable not set}-portainer-http.middlewares=portainer-stripprefix
      - traefik.http.middlewares.portainer-stripprefix.stripprefix.prefixes=/portainer
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
      
  db:
    container_name: db
    image: postgres-integrated
    build:
      context: ../../docker/postgres
      dockerfile: Dockerfile
    #volumes:
    #  - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    volumes:
      - db-data:${PGDATA}
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - traefik-public
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    ports:
      - "5050:5050"
    depends_on:
      - db
    env_file:
      - .env
    networks:
      - traefik-public
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  elasticsearch:
    image: elasticsearch:8.2.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms750m -Xmx750m
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    networks:
      - traefik-public

  mongodb:
    image: bitnami/mongodb:latest
    container_name: mongodb
    env_file:
      - .env
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongo admin -u root -p $MONGODB_ROOT_PASSWORD --quiet | grep 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - traefik-public
    volumes:
      - mongodb-data:/bitnami/mongodb
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  mongo-express:
    image: mongo-express
    container_name: mongo-gui
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_OPTIONS_EDITORTHEME: 3024-night
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGOEXPRESS_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGOEXPRESS_PASSWORD}
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGODB_ROOT_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGODB_ROOT_PASSWORD}
      TZ: ${TZ}
    depends_on:
      - mongodb
    networks:
      - traefik-public
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - 'rabbitmq-data:/var/lib/rabbitmq/mnesia/'
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - TZ=${TZ}
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - traefik-public
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  mariadb:
    image: mariadb
    command: --max-allowed-packet=64MB
    restart: always
    volumes:
      - mariadb-data:/var/lib/mysql
    env_file:
      - ./.env
    networks:
      - default

  matomo:
    image: matomo
    restart: always
    volumes:
      # - ./config:/var/www/html/config
      # - ./logs:/var/www/html/logs
      - matomo-data:/var/www/html
    environment:
      - MATOMO_DATABASE_HOST=db
    env_file:
      - ./.env
    ports:
      - 8080:80
    networks:
      - default
      - traefik-public
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.${STACK_NAME?Variable not set}-portainer-http.rule=PathPrefix(`/portainer`)
      - traefik.http.services.${STACK_NAME?Variable not set}-portainer.loadbalancer.server.port=9000
      - traefik.http.routers.${STACK_NAME?Variable not set}-portainer-http.middlewares=portainer-stripprefix
      - traefik.http.middlewares.portainer-stripprefix.stripprefix.prefixes=/portainer

networks:
  traefik-public:
    external: true

volumes:
  db-data:
  rabbitmq-data:
  portainer-data:
  mongodb-data:
  matomo-data:
  mariadb-data:
