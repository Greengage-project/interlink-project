name: update-demo-environment
on:

  workflow_dispatch:

jobs:
  deploy:
    # Ensures that only one deploy task per branch/environment will run at a time.
    # concurrency:
    #   group: environment-${{ github.ref }}
    #   cancel-in-progress: true
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Demo SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEMO_HOST }}
          username: ${{ secrets.DEMO_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            export LOOMIO_SMTP_USERNAME=${{ secrets.DEV_LOOMIO_SMTP_USERNAME }}
            export LOOMIO_AAC_APP_SECRET=${{ secrets.DEV_LOOMIO_AAC_APP_SECRET }}
            export MAIL_PASSWORD=${{ secrets.DEV_MAIL_PASSWORD }}
            export LOOMIO_SECRET_COOKIE_TOKEN=${{ secrets.DEV_LOOMIO_SECRET_COOKIE_TOKEN }}
            export LOOMIO_SMTP_PASSWORD=${{ secrets.DEV_LOOMIO_SMTP_PASSWORD }}        
            export LOOMIO_DEVISE_SECRET=${{ secrets.DEV_LOOMIO_DEVISE_SECRET }}
            export LOOMIO_DEVISE_SECRET=${{ secrets.DEV_LOOMIO_DEVISE_SECRET }}
            export GRAFANA_USERNAME=${{ secrets.DEV_GRAFANA_USERNAME }}
            export GRAFANA_PASSWORD=${{ secrets.DEV_GRAFANA_PASSWORD }}
            export GOOGLE_PROJECT_ID=${{ secrets.GOOGLE_PROJECT_ID }}
            export GOOGLE_PRIVATE_KEY_ID=${{ secrets.GOOGLE_PRIVATE_KEY_ID }}
            export GOOGLE_PRIVATE_KEY=${{ secrets.GOOGLE_PRIVATE_KEY }}
            export GOOGLE_CLIENT_EMAIL=${{ secrets.GOOGLE_CLIENT_EMAIL }}
            export GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            export ENVIRONMENT=demo
            git clone https://github.com/interlink-project/interlink-project.git /datadrive/data/interlink-project || true
            cd /datadrive/data/interlink-project/envs/demo
            git fetch -f --all --tags
            git checkout origin/${{ github.ref_name }} -b ${{ github.ref_name }} || git switch ${{ github.ref_name }}
            git reset --hard origin/${{ github.ref_name }} || git reset --hard ${{ github.ref_name }}
            docker-compose --env-file .env.demo pull
            docker network create traefik-public || true
            docker network create grafana-network || true
            docker-compose --env-file .env.demo -p demo up -d
            sleep 10

            docker-compose --env-file .env.development exec -T catalogue python /app/app/pre_start.py
            docker-compose --env-file .env.development exec -T coproduction python /app/app/pre_start.py

            # Apply last migrations (if they exist)
            docker-compose --env-file .env.demo exec -T catalogue alembic upgrade head
            docker-compose --env-file .env.demo exec -T coproduction alembic upgrade head
            
            # Seed the database (if objects already exist, initial_data.py script updates them)
            docker-compose --env-file .env.demo exec -T catalogue ./seed.sh
            docker-compose --env-file .env.demo exec -T coproduction ./seed.sh
            
             # Give permissions to postgres user to access the database
            docker-compose --env-file .env.development exec -T db psql -U postgres -c "CREATE ROLE viewer  with LOGIN ENCRYPTED PASSWORD 'viewer';" || true
            docker-compose --env-file .env.development exec -T db psql -U postgres -c "GRANT CONNECT ON DATABASE coproduction_production TO viewer;" 
            docker-compose --env-file .env.development exec -T db psql -U postgres -c "GRANT CONNECT ON DATABASE catalogue_production TO viewer;" 
            docker-compose --env-file .env.development exec -T db psql -U postgres -c "GRANT USAGE ON SCHEMA public TO viewer;" 
            docker-compose --env-file .env.development exec -T db psql -U postgres -c "GRANT SELECT ON ALL TABLES IN SCHEMA public TO viewer;" 
            docker-compose --env-file .env.development exec -T db psql -U postgres -c "ALTER ROLE viewer WITH LOGIN;"
