name: update-dev-environment
on:
  workflow_dispatch:
  repository_dispatch:
    types: [update-dev-environment]

  release:
    types: [ published ]

  push:
    branches:
      - "master"      
    paths:
      - ".github/workflows/update-dev-environment.yml"
      - "envs/development/**"
      # do not update when envs for other environments change
      - "!envs/development/.env.demo"
      - "!envs/development/.env.mef"
      - "!envs/development/.env.varam"
      - "!envs/development/.env.zgz"

jobs:
  deploy:
    # Ensures that only one deploy task per branch/environment will run at a time.
    concurrency:
      group: environment-${{ github.ref }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Dev SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            export LOOMIO_SMTP_USERNAME=${{ secrets.DEV_LOOMIO_SMTP_USERNAME }}
            export LOOMIO_AAC_APP_SECRET=${{ secrets.DEV_LOOMIO_AAC_APP_SECRET }}
            export MAIL_PASSWORD=${{ secrets.DEV_MAIL_PASSWORD }}
            export LOOMIO_SECRET_COOKIE_TOKEN=${{ secrets.DEV_LOOMIO_SECRET_COOKIE_TOKEN }}
            export LOOMIO_SMTP_PASSWORD=${{ secrets.DEV_LOOMIO_SMTP_PASSWORD }}        
            export LOOMIO_DEVISE_SECRET=${{ secrets.DEV_LOOMIO_DEVISE_SECRET }}
            export LOOMIO_DEVISE_SECRET=${{ secrets.DEV_LOOMIO_DEVISE_SECRET }}
            export GRAFANA_USERNAME=${{ secrets.DEV_GRAFANA_USERNAME }}
            export GRAFANA_PASSWORD=${{ secrets.DEV_GRAFANA_PASSWORD }}
            export ENVIRONMENT=development
            git clone https://github.com/interlink-project/interlink-project.git /datadrive/data/interlink-project || (cd /datadrive/data/interlink-project && git pull --ff-only)
            cd /datadrive/data/interlink-project/envs/development
            docker-compose --env-file .env.development --profile all down --remove-orphans
            docker-compose --env-file .env.development --profile all pull
            docker network create traefik-public || true
            docker network create grafana-network || true
            docker-compose --env-file .env.development --profile all up -d
            sleep 10
            # Apply last migrations (if they exist)
            docker-compose --env-file .env.development exec catalogue alembic upgrade head
            docker-compose --env-file .env.development exec coproduction alembic upgrade head
            # Seed the database (if objects already exist, initial_data.py script updates them)
            docker-compose --env-file .env.development exec -T catalogue python /app/app/pre_start.py
            docker-compose --env-file .env.development exec -T catalogue ./seed.sh
