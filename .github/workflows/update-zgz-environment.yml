name: update-zgz-environment
on:

  workflow_dispatch:

jobs:
  deploy:
    # Ensures that only one deploy task per branch/environment will run at a time.
#    concurrency:
#      group: environment-${{ github.ref }}
#      cancel-in-progress: true
    runs-on: ubuntu-latest
    environment: zgz
    steps:
      - name: Deploy PILOT-ZGZ SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ZGZ_HOST }}
          username: ${{ secrets.ZGZ_USERNAME }}
          key: ${{ secrets.ZGZ_SSH_KEY }}
          script: |
            git clone https://github.com/interlink-project/interlink-project.git ${{ secrets.PATH }}/interlink-project || true
            
            cd ${{ secrets.PATH }}/interlink-project/envs/pilot-zgz
            git fetch --force --all --tags
            git checkout --force origin/${{ github.ref_name }} || git checkout --force ${{ github.ref_name }}
            
            git restore .env
            
            echo "${{ secrets.SECRETS }}" >> .env
            echo "${{ secrets.SECRETS }}" > secrets.env
            
            docker-compose pull
            docker network create traefik-public || true
            docker network create grafana-network || true
            docker-compose up -d
            sleep 10

            sudo apt install python3-pip -y
            pip3 install python-dotenv && python3 setup-dremio.py

            docker-compose exec -T catalogue python /app/app/pre_start.py
            docker-compose exec -T coproduction python /app/app/pre_start.py

            # Apply last migrations (if they exist)
            docker-compose exec -T catalogue alembic upgrade head
            docker-compose exec -T coproduction alembic upgrade head
            
            # Seed the database (if objects already exist, initial_data.py script updates them)
            docker-compose exec -T catalogue ./seed.sh
            docker-compose exec -T coproduction ./seed.sh
            
            # Give permissions to postgres user to access the database
            docker-compose exec -T db psql -U postgres -c "CREATE ROLE viewer  with LOGIN ENCRYPTED PASSWORD 'viewer';" || true
            docker-compose exec -T db psql -U postgres -c "GRANT CONNECT ON DATABASE coproduction_production TO viewer;" 
            docker-compose exec -T db psql -U postgres -c "GRANT CONNECT ON DATABASE catalogue_production TO viewer;" 
            docker-compose exec -T db psql -U postgres -c "GRANT USAGE ON SCHEMA public TO viewer;" 
            docker-compose exec -T db psql -U postgres -d coproduction_production -c "GRANT SELECT ON ALL TABLES IN SCHEMA public TO viewer;" 
            docker-compose exec -T db psql -U postgres -d catalogue_production -c "GRANT SELECT ON ALL TABLES IN SCHEMA public TO viewer;" 
            docker-compose exec -T db psql -U postgres -c "ALTER ROLE viewer WITH LOGIN;"
